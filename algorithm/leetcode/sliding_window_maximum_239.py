'''
给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。

返回滑动窗口中的最大值。

 

进阶：

你能在线性时间复杂度内解决此题吗？

 

示例:

输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3
输出: [3,3,5,5,6,7]
解释:

  滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
 

提示：

1 <= nums.length <= 10^5
-10^4 <= nums[i] <= 10^4
1 <= k <= nums.length
'''
from typing import List


class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        if len(nums) < k:
            return nums
        ans, stack = [], []
        for i in range(0, len(nums)):
            while len(stack) > 0 and nums[stack[-1]] < nums[i]:
                stack.pop()
            stack.append(i)

            if i - k >= stack[0]:
                stack.pop(0)

            if i >= k - 1:
                ans.append(nums[stack[0]])
        return ans


if __name__ == "__main__":
    solution = Solution()
    # print(solution.maxSlidingWindow([1, 3, -1, -3, 5, 3, 6, 7], 3))
    print(solution.maxSlidingWindow([1, -1], 1))

    x = 80 * 5 + 78 * 4 + 66 * 1.5 + 67 * 4 + 79 * 1 + 89 * 2 + 80 * 6 + 80 * 3 + 78 * 4 + 81 * 3 + 88 * 3 + 83 * 3.5 + 67 * 3 + 67 * 2.5 + 90 * 3 + 91 * 3 + 72 * 2.5 + 67 * 2.5 + 92 * 2 + 77 * 3 + 88 * 2 + 61 * 1.5 + 80 * 2.5 + 75 * 2 + 90 * 2 + 87 * 2 + 77 * 2 + 68 * 1 + 75 * 3 + 73 * 2 + 63 * 3 + 95 * 1.5 + 70 * 2 + 90 * 3 + 77 * 2 + 76 * 4 + 99 * 1.5 + 76 * 5 + 66 * 4 + 86 * 1.5 + 73 * 3 + 71 * 3 + 80 * 4 + 97 * 1.5 + 91 * 4 + 74 * 3 + 85 * 3 + 78 * 3 + 83 * 2 + 78 * 2 + 78 * 2 + 85 * 2
    y = 5 + 4 + 1.5 + 4 + 1 + 2 + 6 + 3 + 4 + 3 + 3 + 3.5 + 3 + 2.5 + 3 + 3 + 2.5 + 2.5 + 2 + 3 + 2 + 1.5 + 2.5 + 2 + 2 + 2 + 2 + 3 + 1 + 3 + 2 + 3 + 1.5 + 2 + 3 + 2.5 + 1 + 2 + 4 + 1.5 + 5 + 2 + 4 + 1.5 + 3 + 3 + 4 + 1.5 + 4 + 3 + 3 + 3 + 2 + 2 + 2 + 2
    print(x, y, x / y)
